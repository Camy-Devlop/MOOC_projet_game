
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rootAND AS CALL COLON COMMENT DEDENT DOCUMENT_START ELIF ELSE EMPTYDICT EMPTYLIST EQ EXPRESSION_START EXTEND FLOAT FLOOR_DIVIDE FOR GE GTLT HYPHEN IDENTIFIER IF IN INCLUDE INDENT INTEGER IS LAMBDA LDBRACE LE LSHIFT MACRO MULTILINE MULTILINE_END NE NEW NEWLINE NOT OR POW PROTOTYPE RDBRACE RSHIFT SEARCH SELECT SET STRING VALUE WS\n        atom : identifier\n        \n        atom : STRING\n             | INTEGER\n             | FLOAT\n        \n        atom : enclosure\n        \n        enclosure : parenth_form\n                  | list_display\n                  | generator_expression\n                  | dict_display\n                  | set_display\n                  | string_conversion\n        \n        parenth_form : "(" ")"\n                     | "(" expression_list ")"\n        \n        list_display : "[" "]"\n                     | "[" expression_list "]"\n                     | "[" list_comprehension "]"\n        \n        list_comprehension : expression list_for\n        \n        list_for : FOR target_list IN old_expression_list\n                 | FOR target_list IN old_expression_list list_iter\n        \n        old_expression_list : old_expression\n                            | old_expression_list "," old_expression\n                            | old_expression_list ","\n        \n        old_expression : or_test\n                       | old_lambda_form\n        \n        list_iter : list_for\n                  | list_if\n        \n        list_if : IF old_expression\n                | IF old_expression list_iter\n        \n        comprehension : expression comp_for\n        \n        comp_for : FOR target_list IN or_test\n                 | FOR target_list IN or_test comp_iter\n        \n        comp_iter : comp_for\n                  | comp_if\n        \n        comp_if : IF expression\n                | IF expression comp_iter\n        \n        generator_expression : "(" expression comp_for ")"\n        \n        dict_display : "{" "}"\n                     | "{" key_datum_list "}"\n                     | "{" dict_comprehension "}"\n        \n        key_datum_list : key_datum\n                       | key_datum_list "," key_datum\n        \n        key_datum : expression ":" expression\n        \n        dict_comprehension : expression ":" expression comp_for\n        \n        set_display : "{" expression_list "}"\n                    | "{" comprehension "}"\n        \n        string_conversion : "`" expression_list "`"\n        \n        primary : atom\n                | attributeref\n                | subscription\n                | slice\n                | call\n        \n        attributeref : primary "." IDENTIFIER\n        \n        subscription : primary "[" expression_list "]"\n        \n        slice : primary "[" proper_slice "]"\n        \n        proper_slice : short_slice\n                     | long_slice\n        \n        short_slice : lower_bound ":"\n        \n        short_slice : ":" upper_bound\n        \n        short_slice : lower_bound ":" upper_bound\n        \n        long_slice : short_slice ":"\n                   | short_slice ":" stride\n        \n        lower_bound : expression\n        \n        upper_bound : expression\n        \n        stride : expression\n        \n        call : primary "(" ")"\n             | primary "(" argument_list ")"\n        \n        argument_list : positional_arguments\n                      | positional_arguments ","\n                      | positional_arguments "," keyword_arguments\n                      | positional_arguments "," keyword_arguments ","\n        \n        argument_list : keyword_arguments\n                      | keyword_arguments ","\n        \n        positional_arguments : expression\n                             | positional_arguments "," expression\n        \n        keyword_arguments : kwarg\n                          | keyword_arguments "," kwarg\n        \n        kwarg : identifier "=" expression\n        \n        power : primary\n              | primary POW u_expr\n        \n        u_expr : power\n               | "-" u_expr\n               | "+" u_expr\n               | "~" u_expr\n        \n        m_expr : u_expr\n               | m_expr "*" u_expr\n               | m_expr FLOOR_DIVIDE u_expr\n               | m_expr "/" u_expr\n               | m_expr "%" u_expr\n        \n        a_expr : m_expr\n               | a_expr "+" m_expr\n               | a_expr "-" m_expr\n        \n        shift_expr : a_expr\n                   | shift_expr LSHIFT a_expr\n                   | shift_expr RSHIFT a_expr\n        \n        and_expr : shift_expr\n                 | and_expr "&" shift_expr\n        \n        xor_expr : and_expr\n                 | xor_expr "^" and_expr\n        \n        or_expr : xor_expr\n                | or_expr "|" xor_expr\n        \n        comparison : or_expr\n                   | or_expr comp_operator or_expr\n        \n        comp_operator : "<"\n                      | ">"\n                      | EQ\n                      | GE\n                      | LE\n                      | GTLT\n                      | NE\n                      | IS\n                      | IS NOT\n                      | NOT\n                      | NOT IN\n        \n        or_test : and_test\n                | or_test OR and_test\n        \n        and_test : not_test\n                 | and_test AND not_test\n        \n        not_test : comparison\n                 | NOT not_test\n        \n        conditional_expression : or_test\n                               | expression IF or_test ELSE expression\n        \n        else_test : expression ELSE expression\n        \n        expression : conditional_expression\n                   | else_test\n                   | lambda_form\n        \n        lambda_form : LAMBDA ":" expression\n                    | LAMBDA parameter_list ":" expression\n        \n        old_lambda_form : LAMBDA ":" expression\n                        | LAMBDA parameter_list ":" old_expression\n        \n        expression_list : expression\n                        | expression_list "," expression\n                        | expression_list ","\n        \n        target_list : target\n                    | target_list "," target\n                    | target_list ","\n        \n        identifier : IDENTIFIER\n        \n        target : identifier\n               | attributeref\n               | subscription\n               | slice\n        \n        parameter_list : defparameter\n                       | parameter_list "," defparameter\n                       | parameter_list ","\n        \n        defparameter : parameter\n                     | parameter "=" expression\n        \n        parameter : identifier\n                  | "(" sublist ")"\n        \n        sublist : parameter\n                | sublist "," parameter\n                | sublist ","\n        \n        directive : include_directive\n                  | search_directive\n                  | new_directive\n                  | prototype_directive\n                  | for_directive\n                  | set_directive\n                  | if_directive\n                  | select_directive\n                  | macro_directive\n                  | call_directive\n                  | err_else\n        \n        err_else : ELSE ":" NEWLINE INDENT stanzas DEDENT\n        \n        directives : directive directive\n        \n        directives : directives directive\n        \n        include_directive : INCLUDE expression_list NEWLINE\n        \n        search_directive : SEARCH expression_list NEWLINE\n        \n        macro_directive : MACRO target_list ":" NEWLINE INDENT stanzas DEDENT\n        \n        call_directive : CALL target_list ":" NEWLINE INDENT stanzas DEDENT\n        \n        for_directive : FOR target_list IN expression_list ":" NEWLINE INDENT stanzas DEDENT\n                      | FOR target_list IN or_test IF expression ":" NEWLINE INDENT stanzas DEDENT\n        \n        set_directive : SET target_list "=" expression_list NEWLINE\n        \n        if_directive : IF expression_list ":" NEWLINE INDENT stanzas DEDENT\n        \n        if_directive : IF expression_list ":" NEWLINE INDENT stanzas DEDENT ELSE ":" NEWLINE INDENT stanzas DEDENT\n        \n        if_directive : IF expression_list ":" NEWLINE INDENT stanzas DEDENT elif_list\n        \n        if_directive : IF expression_list ":" NEWLINE INDENT stanzas DEDENT elif_list ELSE ":" NEWLINE INDENT stanzas DEDENT\n        \n        elif_list : elif\n                  | elif_list elif\n        \n        elif : ELIF expression_list ":" NEWLINE INDENT stanzas DEDENT\n        \n        new_directive : NEW expression_list AS identifier ":" NEWLINE INDENT stanzas DEDENT\n        \n        new_directive : NEW expression_list ":" NEWLINE INDENT stanzas DEDENT\n        \n        prototype_directive : PROTOTYPE expression_list ":" NEWLINE INDENT stanzas DEDENT\n        \n        select_directive : SELECT expression_list ":" NEWLINE INDENT case_list DEDENT\n        \n        case_list : case_block\n                  | case_list case_block\n        \n        case_block : key NEWLINE INDENT stanzas DEDENT\n                   | key scalar NEWLINE\n                   | key NEWLINE\n        \n        empty :\n        \n        root : DOCUMENT_START document_root\n             | EXPRESSION_START expression_root\n        \n        document_root : stanzas\n                      | empty\n        \n        expression_root : expression_list\n        \n        stanza : yaydict\n               | yaylist\n               | extend\n               | directives\n               | directive\n        \n        stanzas : stanza\n                | stanza stanza\n        \n        stanzas : stanzas stanza\n        \n        extend : EXTEND key scalar NEWLINE\n               | EXTEND key NEWLINE INDENT stanzas DEDENT\n        \n        scalar : EMPTYDICT\n        \n        scalar : EMPTYLIST\n        \n        scalar : VALUE\n        \n        key : VALUE COLON\n        \n        scalar : LDBRACE expression_list RDBRACE\n        \n        scalar : multiline MULTILINE_END\n        \n        scalar : scalar scalar\n        \n        yaydict : key scalar NEWLINE\n        \n        yaydict : key NEWLINE INDENT stanzas DEDENT\n        \n        yaydict : key NEWLINE\n        \n        multiline : MULTILINE scalar NEWLINE\n        \n        multiline : multiline scalar NEWLINE\n        \n        yaydict : yaydict yaydict\n        \n        listitem : HYPHEN scalar NEWLINE\n        \n        listitem : HYPHEN key NEWLINE INDENT stanzas DEDENT\n        \n        listitem : HYPHEN key scalar NEWLINE\n        \n        listitem : HYPHEN key scalar NEWLINE INDENT yaydict DEDENT\n        \n        yaylist : listitem\n                | yaylist listitem\n        '
    
_lr_action_items = {'DOCUMENT_START':([0,],[2,]),'EXPRESSION_START':([0,],[3,]),'$end':([1,2,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,40,41,42,43,44,45,46,48,49,50,52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,85,86,87,88,89,90,92,121,132,154,155,156,161,165,168,177,185,188,189,201,203,204,205,211,212,213,216,217,218,219,220,221,222,223,224,225,226,227,235,242,243,246,249,251,252,253,256,261,264,278,283,284,289,294,299,309,314,328,329,337,351,353,354,357,358,362,363,379,380,389,390,394,407,414,417,418,],[0,-188,-189,-191,-192,-199,-194,-195,-196,-197,-198,-221,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-190,-193,-130,-123,-124,-125,-120,-114,-116,-118,-101,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-201,-200,-216,-222,-164,-163,-213,-132,-119,-82,-81,-83,-14,-12,-37,-211,-217,-165,-166,-131,-122,-115,-126,-117,-102,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-15,-16,-13,-38,-39,-44,-45,-46,-202,-219,-127,-53,-54,-66,-36,-212,-171,-121,-203,-218,-162,-220,-180,-181,-172,-182,-167,-168,-174,-176,-179,-169,-177,-170,-173,-175,-178,]),'EXTEND':([2,5,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,85,86,87,88,89,90,92,177,178,185,188,189,257,261,262,263,264,273,299,300,301,304,305,308,309,310,312,313,328,329,332,333,336,337,341,342,351,352,353,354,355,357,358,362,363,375,376,379,380,382,389,390,391,394,396,401,407,408,411,412,413,414,415,416,417,418,],[15,15,15,-194,-195,-196,-197,-198,-221,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-201,-200,-216,-222,-164,-163,-213,-211,15,-217,-165,-166,15,-202,15,15,-219,15,-212,15,15,15,15,15,-171,15,15,15,-203,-218,15,15,15,-162,15,15,-220,15,-180,-181,15,-172,-182,-167,-168,15,15,-174,-176,15,-179,-169,15,-177,15,15,-170,15,15,15,15,-173,15,15,-175,-178,]),'VALUE':([2,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,176,177,178,180,181,182,183,185,187,188,189,257,258,259,260,261,262,263,264,273,299,300,301,302,304,305,308,309,310,311,312,313,328,329,330,332,333,336,337,338,339,340,341,342,351,352,353,354,355,357,358,359,360,361,362,363,375,376,379,380,382,383,389,390,391,394,396,401,405,407,408,411,412,413,414,415,416,417,418,],[27,27,27,27,-195,-196,-197,-198,95,-221,27,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,103,-201,-200,27,-222,-164,-163,95,-213,-204,-205,-206,95,95,95,-207,95,95,-206,95,-211,27,-209,95,95,95,-217,95,-165,-166,27,-208,-215,-214,-202,27,27,-219,27,-212,27,27,27,27,27,27,-171,27,27,27,27,-203,-218,27,27,27,27,-162,27,-183,95,27,27,-220,27,-180,-181,27,-172,-182,-184,-187,95,-167,-168,27,27,-174,-176,27,-186,-179,-169,27,-177,27,27,-185,-170,27,27,27,27,-173,27,27,-175,-178,]),'HYPHEN':([2,5,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,85,86,87,88,89,90,92,177,178,185,188,189,257,261,262,263,264,273,299,300,301,304,305,308,309,310,312,313,328,329,332,333,336,337,341,342,351,352,353,354,355,357,358,362,363,375,376,379,380,382,389,390,391,394,396,401,407,408,411,412,413,414,415,416,417,418,],[28,28,28,-194,28,-196,-197,-198,-221,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-201,-200,-216,-222,-164,-163,-213,-211,28,-217,-165,-166,28,-202,28,28,-219,28,-212,28,28,28,28,28,-171,28,28,28,-203,-218,28,28,28,-162,28,28,-220,28,-180,-181,28,-172,-182,-167,-168,28,28,-174,-176,28,-179,-169,28,-177,28,28,-170,28,28,28,28,-173,28,28,-175,-178,]),'INCLUDE':([2,5,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,85,86,87,88,89,90,92,177,178,185,188,189,257,261,262,263,264,273,299,300,301,304,305,308,309,310,312,313,328,329,332,333,336,337,341,342,351,352,353,354,355,357,358,362,363,375,376,379,380,382,389,390,391,394,396,401,407,408,411,412,413,414,415,416,417,418,],[29,29,29,-194,-195,-196,29,29,-221,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-201,-200,-216,-222,-164,-163,-213,-211,29,-217,-165,-166,29,-202,29,29,-219,29,-212,29,29,29,29,29,-171,29,29,29,-203,-218,29,29,29,-162,29,29,-220,29,-180,-181,29,-172,-182,-167,-168,29,29,-174,-176,29,-179,-169,29,-177,29,29,-170,29,29,29,29,-173,29,29,-175,-178,]),'SEARCH':([2,5,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,85,86,87,88,89,90,92,177,178,185,188,189,257,261,262,263,264,273,299,300,301,304,305,308,309,310,312,313,328,329,332,333,336,337,341,342,351,352,353,354,355,357,358,362,363,375,376,379,380,382,389,390,391,394,396,401,407,408,411,412,413,414,415,416,417,418,],[30,30,30,-194,-195,-196,30,30,-221,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-201,-200,-216,-222,-164,-163,-213,-211,30,-217,-165,-166,30,-202,30,30,-219,30,-212,30,30,30,30,30,-171,30,30,30,-203,-218,30,30,30,-162,30,30,-220,30,-180,-181,30,-172,-182,-167,-168,30,30,-174,-176,30,-179,-169,30,-177,30,30,-170,30,30,30,30,-173,30,30,-175,-178,]),'NEW':([2,5,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,85,86,87,88,89,90,92,177,178,185,188,189,257,261,262,263,264,273,299,300,301,304,305,308,309,310,312,313,328,329,332,333,336,337,341,342,351,352,353,354,355,357,358,362,363,375,376,379,380,382,389,390,391,394,396,401,407,408,411,412,413,414,415,416,417,418,],[31,31,31,-194,-195,-196,31,31,-221,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-201,-200,-216,-222,-164,-163,-213,-211,31,-217,-165,-166,31,-202,31,31,-219,31,-212,31,31,31,31,31,-171,31,31,31,-203,-218,31,31,31,-162,31,31,-220,31,-180,-181,31,-172,-182,-167,-168,31,31,-174,-176,31,-179,-169,31,-177,31,31,-170,31,31,31,31,-173,31,31,-175,-178,]),'PROTOTYPE':([2,5,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,85,86,87,88,89,90,92,177,178,185,188,189,257,261,262,263,264,273,299,300,301,304,305,308,309,310,312,313,328,329,332,333,336,337,341,342,351,352,353,354,355,357,358,362,363,375,376,379,380,382,389,390,391,394,396,401,407,408,411,412,413,414,415,416,417,418,],[32,32,32,-194,-195,-196,32,32,-221,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-201,-200,-216,-222,-164,-163,-213,-211,32,-217,-165,-166,32,-202,32,32,-219,32,-212,32,32,32,32,32,-171,32,32,32,-203,-218,32,32,32,-162,32,32,-220,32,-180,-181,32,-172,-182,-167,-168,32,32,-174,-176,32,-179,-169,32,-177,32,32,-170,32,32,32,32,-173,32,32,-175,-178,]),'FOR':([2,5,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,43,44,45,46,48,49,50,52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,85,86,87,88,89,90,92,132,154,155,156,161,164,165,167,168,174,177,178,185,188,189,203,204,205,211,212,213,216,217,218,219,220,221,222,223,224,225,226,227,235,242,243,246,249,251,252,253,256,257,261,262,263,264,273,278,283,284,289,294,298,299,300,301,304,305,308,309,310,312,313,314,328,329,332,333,336,337,341,342,344,345,346,347,349,351,352,353,354,355,357,358,362,363,365,375,376,379,380,382,384,385,386,388,389,390,391,394,396,398,401,406,407,408,411,412,413,414,415,416,417,418,],[33,33,33,-194,-195,-196,33,33,-221,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-123,-124,-125,-120,-114,-116,-118,-101,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-201,-200,-216,-222,-164,-163,-213,-119,-82,-81,-83,-14,245,-12,248,-37,248,-211,33,-217,-165,-166,-122,-115,-126,-117,-102,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-15,-16,-13,-38,-39,-44,-45,-46,33,-202,33,33,-219,33,-127,-53,-54,-66,-36,248,-212,33,33,33,33,33,-171,33,33,33,-121,-203,-218,33,33,33,-162,33,33,245,-20,-23,-24,248,-220,33,-180,-181,33,-172,-182,-167,-168,-22,33,33,-174,-176,33,-21,245,-128,248,-179,-169,33,-177,33,-129,33,-120,-170,33,33,33,33,-173,33,33,-175,-178,]),'SET':([2,5,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,85,86,87,88,89,90,92,177,178,185,188,189,257,261,262,263,264,273,299,300,301,304,305,308,309,310,312,313,328,329,332,333,336,337,341,342,351,352,353,354,355,357,358,362,363,375,376,379,380,382,389,390,391,394,396,401,407,408,411,412,413,414,415,416,417,418,],[35,35,35,-194,-195,-196,35,35,-221,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-201,-200,-216,-222,-164,-163,-213,-211,35,-217,-165,-166,35,-202,35,35,-219,35,-212,35,35,35,35,35,-171,35,35,35,-203,-218,35,35,35,-162,35,35,-220,35,-180,-181,35,-172,-182,-167,-168,35,35,-174,-176,35,-179,-169,35,-177,35,35,-170,35,35,35,35,-173,35,35,-175,-178,]),'IF':([2,5,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,42,43,44,45,46,48,49,50,52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,85,86,87,88,89,90,92,132,154,155,156,161,164,165,167,168,174,177,178,185,188,189,201,203,204,205,211,212,213,216,217,218,219,220,221,222,223,224,225,226,227,230,235,239,241,242,243,246,249,251,252,253,256,257,261,262,263,264,269,273,278,280,283,284,288,289,294,297,298,299,300,301,304,305,308,309,310,312,313,314,317,320,323,328,329,332,333,335,336,337,341,342,344,345,346,347,349,350,351,352,353,354,355,357,358,362,363,365,375,376,379,380,382,384,385,386,388,389,390,391,394,396,398,401,406,407,408,411,412,413,414,415,416,417,418,],[34,34,34,-194,-195,-196,34,34,-221,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,122,-123,-124,-125,-120,-114,-116,-118,-101,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-201,-200,-216,-222,-164,-163,-213,-119,-82,-81,-83,-14,122,-12,122,-37,122,-211,34,-217,-165,-166,122,122,-115,122,-117,-102,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,122,-65,122,-1,-15,-16,-13,-38,-39,-44,-45,-46,34,-202,34,34,-219,307,34,122,122,-53,-54,122,-66,-36,122,122,-212,34,34,34,34,34,-171,34,34,34,122,122,122,122,-203,-218,34,34,122,34,-162,34,34,368,-20,-23,-24,374,122,-220,34,-180,-181,34,-172,-182,-167,-168,-22,34,34,-174,-176,34,-21,368,122,399,-179,-169,34,-177,34,-129,34,-120,-170,34,34,34,34,-173,34,34,-175,-178,]),'SELECT':([2,5,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,85,86,87,88,89,90,92,177,178,185,188,189,257,261,262,263,264,273,299,300,301,304,305,308,309,310,312,313,328,329,332,333,336,337,341,342,351,352,353,354,355,357,358,362,363,375,376,379,380,382,389,390,391,394,396,401,407,408,411,412,413,414,415,416,417,418,],[37,37,37,-194,-195,-196,37,37,-221,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-201,-200,-216,-222,-164,-163,-213,-211,37,-217,-165,-166,37,-202,37,37,-219,37,-212,37,37,37,37,37,-171,37,37,37,-203,-218,37,37,37,-162,37,37,-220,37,-180,-181,37,-172,-182,-167,-168,37,37,-174,-176,37,-179,-169,37,-177,37,37,-170,37,37,37,37,-173,37,37,-175,-178,]),'MACRO':([2,5,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,85,86,87,88,89,90,92,177,178,185,188,189,257,261,262,263,264,273,299,300,301,304,305,308,309,310,312,313,328,329,332,333,336,337,341,342,351,352,353,354,355,357,358,362,363,375,376,379,380,382,389,390,391,394,396,401,407,408,411,412,413,414,415,416,417,418,],[38,38,38,-194,-195,-196,38,38,-221,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-201,-200,-216,-222,-164,-163,-213,-211,38,-217,-165,-166,38,-202,38,38,-219,38,-212,38,38,38,38,38,-171,38,38,38,-203,-218,38,38,38,-162,38,38,-220,38,-180,-181,38,-172,-182,-167,-168,38,38,-174,-176,38,-179,-169,38,-177,38,38,-170,38,38,38,38,-173,38,38,-175,-178,]),'CALL':([2,5,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,85,86,87,88,89,90,92,177,178,185,188,189,257,261,262,263,264,273,299,300,301,304,305,308,309,310,312,313,328,329,332,333,336,337,341,342,351,352,353,354,355,357,358,362,363,375,376,379,380,382,389,390,391,394,396,401,407,408,411,412,413,414,415,416,417,418,],[39,39,39,-194,-195,-196,39,39,-221,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-201,-200,-216,-222,-164,-163,-213,-211,39,-217,-165,-166,39,-202,39,39,-219,39,-212,39,39,39,39,39,-171,39,39,39,-203,-218,39,39,39,-162,39,39,-220,39,-180,-181,39,-172,-182,-167,-168,39,39,-174,-176,39,-179,-169,39,-177,39,39,-170,39,39,39,39,-173,39,39,-175,-178,]),'ELSE':([2,5,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,42,43,44,45,46,48,49,50,52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,85,86,87,88,89,90,92,132,154,155,156,161,164,165,167,168,174,177,178,185,188,189,201,202,203,204,205,211,212,213,216,217,218,219,220,221,222,223,224,225,226,227,230,235,239,241,242,243,246,249,251,252,253,256,257,261,262,263,264,269,273,278,280,283,284,288,289,294,297,298,299,300,301,304,305,308,309,310,312,313,314,317,320,323,328,329,332,333,335,336,337,341,342,350,351,352,353,354,355,357,358,362,363,375,376,379,380,382,386,388,389,390,391,394,396,401,406,407,408,411,412,413,414,415,416,417,418,],[36,36,36,-194,-195,-196,36,36,-221,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,123,-123,-124,-125,-120,-114,-116,-118,-101,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-201,-200,-216,-222,-164,-163,-213,-119,-82,-81,-83,-14,123,-12,123,-37,123,-211,36,-217,-165,-166,123,277,123,-115,123,-117,-102,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,123,-65,123,-1,-15,-16,-13,-38,-39,-44,-45,-46,36,-202,36,36,-219,-120,36,123,123,-53,-54,123,-66,-36,123,123,-212,36,36,36,36,36,-171,36,36,36,123,123,123,123,-203,-218,36,36,123,36,-162,36,36,123,-220,36,-180,-181,36,378,-182,-167,-168,36,36,393,-176,36,123,123,-179,-169,36,-177,36,36,277,-170,36,36,36,36,-173,36,36,-175,-178,]),'LAMBDA':([3,29,30,31,32,34,37,75,76,83,84,96,121,123,125,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,324,326,365,368,369,374,381,387,399,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,348,47,348,348,47,47,47,348,47,]),'NOT':([3,29,30,31,32,34,37,51,52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,96,121,122,123,124,125,131,142,154,155,156,159,160,161,165,168,193,196,206,208,213,216,217,218,219,220,221,222,223,224,225,226,227,234,235,241,242,243,246,249,250,251,252,253,254,256,277,283,284,285,286,289,290,292,294,307,324,325,326,365,368,369,374,381,387,399,],[51,51,51,51,51,51,51,51,143,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,51,51,-6,-7,-8,-9,-10,-11,51,51,51,51,51,51,51,51,51,214,-82,-81,-83,51,51,-14,-12,-37,51,51,51,51,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,51,-65,-1,-15,-16,-13,-38,51,-39,-44,-45,51,-46,51,-53,-54,51,51,-66,51,51,-36,51,51,51,51,51,51,51,51,51,51,51,]),'-':([3,29,30,31,32,34,37,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,96,121,122,123,124,125,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,165,168,193,196,206,208,214,215,218,219,220,221,222,223,224,225,226,227,234,235,241,242,243,246,249,250,251,252,253,254,256,277,283,284,285,286,289,290,292,294,307,324,325,326,365,368,369,374,381,387,399,],[59,59,59,59,59,59,59,59,149,-89,59,59,-84,-80,59,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,59,59,-6,-7,-8,-9,-10,-11,59,59,59,59,59,59,59,59,59,59,59,-103,-104,-105,-106,-107,-108,-109,-110,-112,59,59,59,59,59,59,59,59,59,59,-82,-81,-83,59,59,59,-14,-12,-37,59,59,59,59,-111,-113,149,149,-90,-91,-85,-86,-87,-88,-79,-52,59,-65,-1,-15,-16,-13,-38,59,-39,-44,-45,59,-46,59,-53,-54,59,59,-66,59,59,-36,59,59,59,59,59,59,59,59,59,59,59,]),'+':([3,29,30,31,32,34,37,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,96,121,122,123,124,125,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,165,168,193,196,206,208,214,215,218,219,220,221,222,223,224,225,226,227,234,235,241,242,243,246,249,250,251,252,253,254,256,277,283,284,285,286,289,290,292,294,307,324,325,326,365,368,369,374,381,387,399,],[58,58,58,58,58,58,58,58,148,-89,58,58,-84,-80,58,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,58,58,-6,-7,-8,-9,-10,-11,58,58,58,58,58,58,58,58,58,58,58,-103,-104,-105,-106,-107,-108,-109,-110,-112,58,58,58,58,58,58,58,58,58,58,-82,-81,-83,58,58,58,-14,-12,-37,58,58,58,58,-111,-113,148,148,-90,-91,-85,-86,-87,-88,-79,-52,58,-65,-1,-15,-16,-13,-38,58,-39,-44,-45,58,-46,58,-53,-54,58,58,-66,58,58,-36,58,58,58,58,58,58,58,58,58,58,58,]),'~':([3,29,30,31,32,34,37,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,157,159,160,193,196,206,208,214,215,234,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-103,-104,-105,-106,-107,-108,-109,-110,-112,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-111,-113,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'STRING':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,214,215,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-103,-104,-105,-106,-107,-108,-109,-110,-112,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-111,-113,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'INTEGER':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,214,215,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-103,-104,-105,-106,-107,-108,-109,-110,-112,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-111,-113,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'FLOAT':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,214,215,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-103,-104,-105,-106,-107,-108,-109,-110,-112,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-111,-113,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'IDENTIFIER':([3,29,30,31,32,33,34,35,37,38,39,47,51,58,59,62,75,76,83,84,96,121,122,123,124,125,130,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,157,158,159,160,190,193,194,196,206,207,208,214,215,234,245,248,250,254,277,282,285,286,290,291,292,307,324,325,326,343,348,365,368,369,374,381,387,399,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-103,-104,-105,-106,-107,-108,-109,-110,-112,74,74,74,74,74,74,74,74,74,74,74,227,74,74,74,74,74,74,74,74,74,-111,-113,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'(':([3,29,30,31,32,33,34,35,37,38,39,47,51,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,96,110,111,112,113,114,121,122,123,124,125,130,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,157,159,160,161,165,168,193,194,196,206,207,208,214,215,227,234,235,241,242,243,245,246,248,249,250,251,252,253,254,256,277,282,283,284,285,286,289,290,292,294,307,324,325,326,348,365,368,369,374,381,387,399,],[76,76,76,76,76,76,76,76,76,76,76,130,76,76,76,76,160,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,76,76,-6,-7,-8,-9,-10,-11,76,76,76,-1,-48,-49,-50,160,76,76,76,76,76,130,76,76,76,-103,-104,-105,-106,-107,-108,-109,-110,-112,76,76,76,76,76,76,76,76,76,76,76,76,76,-14,-12,-37,76,76,76,76,130,76,-111,-113,-52,76,-65,-1,-15,-16,76,-13,76,-38,76,-39,-44,-45,76,-46,76,130,-53,-54,76,76,-66,76,76,-36,76,76,76,76,130,76,76,76,76,76,76,76,]),'[':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,96,110,111,112,113,114,121,122,123,124,125,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,157,159,160,161,165,168,193,194,196,206,208,214,215,227,234,235,241,242,243,245,246,248,249,250,251,252,253,254,256,277,283,284,285,286,289,290,292,294,307,324,325,326,365,368,369,374,381,387,399,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,159,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,75,75,-6,-7,-8,-9,-10,-11,75,75,75,-1,-48,-49,-50,159,75,75,75,75,75,75,75,75,-103,-104,-105,-106,-107,-108,-109,-110,-112,75,75,75,75,75,75,75,75,75,75,75,75,75,-14,-12,-37,75,75,75,75,75,-111,-113,-52,75,-65,-1,-15,-16,75,-13,75,-38,75,-39,-44,-45,75,-46,75,-53,-54,75,75,-66,75,75,-36,75,75,75,75,75,75,75,75,75,75,75,]),'{':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,214,215,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-103,-104,-105,-106,-107,-108,-109,-110,-112,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-111,-113,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'`':([3,29,30,31,32,33,34,35,37,38,39,42,43,44,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,96,121,122,123,124,125,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,165,168,175,193,194,196,201,203,204,205,206,208,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,234,235,242,243,245,246,248,249,250,251,252,253,254,256,277,278,283,284,285,286,289,290,292,294,307,314,324,325,326,365,368,369,374,381,387,399,],[84,84,84,84,84,84,84,84,84,84,84,-130,-123,-124,-125,-120,-114,-116,-118,84,-101,-99,-97,-95,-92,-89,84,84,-84,-80,84,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,84,84,-6,-7,-8,-9,-10,-11,84,84,84,84,84,84,84,84,84,-119,84,84,-103,-104,-105,-106,-107,-108,-109,-110,-112,84,84,84,84,84,84,84,84,84,84,-82,-81,-83,84,84,84,-14,-12,-37,256,84,84,84,-131,-122,-115,-126,84,84,-117,-102,-100,-111,-113,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,84,-65,-15,-16,84,-13,84,-38,84,-39,-44,-45,84,-46,84,-127,-53,-54,84,84,-66,84,84,-36,84,-121,84,84,84,84,84,84,84,84,84,84,]),'DEDENT':([7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,85,86,87,88,89,90,92,177,185,188,189,257,261,264,299,300,301,309,310,328,329,330,332,333,336,337,338,339,341,342,351,353,354,357,358,359,360,362,363,375,376,379,380,383,389,390,394,396,401,405,407,411,414,415,416,417,418,],[-199,-194,-195,-196,-197,-198,-221,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-201,-200,-216,-222,-164,-163,-213,-211,-217,-165,-166,299,-202,-219,-212,328,329,-171,337,-203,-218,351,353,354,357,-162,358,-183,362,363,-220,-180,-181,-172,-182,-184,-187,-167,-168,389,390,-174,-176,-186,-179,-169,-177,405,407,-185,-170,414,-173,417,418,-175,-178,]),'NEWLINE':([13,42,43,44,45,46,48,49,50,52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,91,93,94,95,99,100,101,102,103,104,105,117,121,132,154,155,156,161,165,168,176,180,181,182,183,187,191,192,195,198,199,200,201,203,204,205,211,212,213,216,217,218,219,220,221,222,223,224,225,226,227,235,242,243,246,249,251,252,253,256,258,272,278,283,284,289,294,303,306,314,340,356,361,392,403,404,],[92,-130,-123,-124,-125,-120,-114,-116,-118,-101,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,177,-204,-205,-206,184,-207,185,186,-206,188,189,197,-132,-119,-82,-81,-83,-14,-12,-37,-210,-209,259,260,261,264,266,267,271,274,275,276,-131,-122,-115,-126,-117,-102,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-15,-16,-13,-38,-39,-44,-45,-46,-208,309,-127,-53,-54,-66,-36,331,334,-121,360,377,383,402,409,410,]),'EMPTYDICT':([13,28,91,93,94,95,97,98,99,100,101,102,103,176,180,181,182,183,187,258,259,260,340,361,],[93,93,93,-204,-205,-206,93,93,93,-207,93,93,-206,93,-209,93,93,93,93,-208,-215,-214,93,93,]),'EMPTYLIST':([13,28,91,93,94,95,97,98,99,100,101,102,103,176,180,181,182,183,187,258,259,260,340,361,],[94,94,94,-204,-205,-206,94,94,94,-207,94,94,-206,94,-209,94,94,94,94,-208,-215,-214,94,94,]),'LDBRACE':([13,28,91,93,94,95,97,98,99,100,101,102,103,176,180,181,182,183,187,258,259,260,340,361,],[96,96,96,-204,-205,-206,96,96,96,-207,96,96,-206,96,-209,96,96,96,96,-208,-215,-214,96,96,]),'MULTILINE':([13,28,91,93,94,95,97,98,99,100,101,102,103,176,180,181,182,183,187,258,259,260,340,361,],[98,98,98,-204,-205,-206,98,98,98,-207,98,98,-206,98,-209,98,98,98,98,-208,-215,-214,98,98,]),'COLON':([27,103,],[100,100,]),':':([36,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,106,107,109,110,111,112,113,115,118,119,120,121,126,127,128,129,132,154,155,156,159,161,165,168,174,194,201,203,204,205,207,211,212,213,216,217,218,219,220,221,222,223,224,225,226,227,230,231,233,235,242,243,246,249,251,252,253,256,265,268,269,270,278,279,280,281,283,284,286,287,288,289,294,297,314,318,335,348,370,378,393,395,],[117,-130,-123,-124,-125,-120,125,-114,-116,-118,-101,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,191,192,-133,-137,-138,-139,-140,195,198,199,200,-132,206,-141,-144,-146,-119,-82,-81,-83,234,-14,-12,-37,254,-135,-131,-122,-115,-126,-143,-117,-102,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-62,285,286,-65,-15,-16,-13,-38,-39,-44,-45,-46,303,306,-120,-134,-127,-142,-145,-147,-53,-54,-57,-58,-63,-66,-36,326,-121,-59,356,369,387,392,403,404,]),',':([41,42,43,44,45,46,48,49,50,52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,104,105,106,107,108,109,110,111,112,113,115,116,118,119,120,121,126,127,128,129,132,154,155,156,161,162,164,165,166,167,168,169,171,173,174,175,179,194,201,203,204,205,207,209,210,211,212,213,216,217,218,219,220,221,222,223,224,225,226,227,228,230,235,237,238,239,240,241,242,243,246,249,251,252,253,256,268,269,270,272,278,279,280,281,282,283,284,289,293,294,295,296,298,314,315,319,320,321,323,344,345,346,347,350,365,370,384,386,395,398,],[121,-130,-123,-124,-125,-120,-114,-116,-118,-101,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,121,121,121,121,194,-133,-137,-138,-139,-140,121,194,121,194,194,-132,207,-141,-144,-146,-119,-82,-81,-83,-14,121,-130,-12,121,-130,-37,250,121,-40,-130,121,121,-135,-131,-122,-115,-126,-143,282,-148,-117,-102,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,121,-130,-65,290,291,-73,-75,-1,-15,-16,-13,-38,-39,-44,-45,-46,121,-120,-134,121,-127,-142,-145,-147,-150,-53,-54,-66,194,-36,194,-41,-42,-121,-149,343,-74,-76,-77,365,-20,-23,-24,-42,-22,207,-21,-128,121,-129,]),'AS':([42,43,44,45,46,48,49,50,52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,106,121,132,154,155,156,161,165,168,201,203,204,205,211,212,213,216,217,218,219,220,221,222,223,224,225,226,227,235,242,243,246,249,251,252,253,256,278,283,284,289,294,314,],[-130,-123,-124,-125,-120,-114,-116,-118,-101,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,190,-132,-119,-82,-81,-83,-14,-12,-37,-131,-122,-115,-126,-117,-102,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-15,-16,-13,-38,-39,-44,-45,-46,-127,-53,-54,-66,-36,-121,]),'RDBRACE':([42,43,44,45,46,48,49,50,52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,121,132,154,155,156,161,165,168,179,201,203,204,205,211,212,213,216,217,218,219,220,221,222,223,224,225,226,227,235,242,243,246,249,251,252,253,256,278,283,284,289,294,314,],[-130,-123,-124,-125,-120,-114,-116,-118,-101,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-132,-119,-82,-81,-83,-14,-12,-37,258,-131,-122,-115,-126,-117,-102,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-15,-16,-13,-38,-39,-44,-45,-46,-127,-53,-54,-66,-36,-121,]),']':([43,44,45,46,48,49,50,52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,80,81,82,121,132,154,155,156,161,162,163,164,165,168,201,203,204,205,211,212,213,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,235,242,243,244,246,249,251,252,253,256,278,283,284,285,286,287,288,289,294,314,316,317,318,344,345,346,347,364,365,366,367,384,385,386,397,398,],[-123,-124,-125,-120,-114,-116,-118,-101,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,161,-6,-7,-8,-9,-10,-11,-132,-119,-82,-81,-83,-14,242,243,-130,-12,-37,-131,-122,-115,-126,-117,-102,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,283,284,-130,-55,-56,-65,-15,-16,-17,-13,-38,-39,-44,-45,-46,-127,-53,-54,-60,-57,-58,-63,-66,-36,-121,-61,-64,-59,-18,-20,-23,-24,-19,-22,-25,-26,-21,-27,-128,-28,-129,]),')':([43,44,45,46,48,49,50,52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,121,129,132,154,155,156,160,161,165,166,167,168,201,203,204,205,209,210,211,212,213,216,217,218,219,220,221,222,223,224,225,226,227,235,236,237,238,239,240,241,242,243,246,247,249,251,252,253,256,278,281,282,283,284,289,290,291,294,314,315,319,320,321,323,343,349,371,372,373,388,400,406,],[-123,-124,-125,-120,-114,-116,-118,-101,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,165,-6,-7,-8,-9,-10,-11,-132,-146,-119,-82,-81,-83,235,-14,-12,246,-130,-37,-131,-122,-115,-126,281,-148,-117,-102,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,289,-67,-71,-73,-75,-1,-15,-16,-13,294,-38,-39,-44,-45,-46,-127,-147,-150,-53,-54,-66,-68,-72,-36,-121,-149,-69,-74,-76,-77,-70,-30,-31,-32,-33,-34,-35,-120,]),'}':([43,44,45,46,48,49,50,52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,121,132,154,155,156,161,165,168,169,170,171,172,173,174,201,203,204,205,211,212,213,216,217,218,219,220,221,222,223,224,225,226,227,235,242,243,246,249,251,252,253,255,256,278,283,284,289,294,296,298,314,327,349,350,371,372,373,388,400,406,],[-123,-124,-125,-120,-114,-116,-118,-101,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,168,-132,-119,-82,-81,-83,-14,-12,-37,249,251,252,253,-40,-130,-131,-122,-115,-126,-117,-102,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-15,-16,-13,-38,-39,-44,-45,-29,-46,-127,-53,-54,-66,-36,-41,-42,-121,-43,-30,-42,-31,-32,-33,-34,-35,-120,]),'OR':([46,48,49,50,52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,132,154,155,156,161,165,168,202,204,211,212,213,216,217,218,219,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,269,283,284,289,294,346,349,406,],[124,-114,-116,-118,-101,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-119,-82,-81,-83,-14,-12,-37,124,-115,-117,-102,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,124,-53,-54,-66,-36,124,124,124,]),'AND':([48,49,50,52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,132,154,155,156,161,165,168,204,211,212,213,216,217,218,219,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[131,-116,-118,-101,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-119,-82,-81,-83,-14,-12,-37,131,-117,-102,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'|':([52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,212,213,216,217,218,219,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[134,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,134,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'<':([52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,213,216,217,218,219,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[135,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'>':([52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,213,216,217,218,219,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[136,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'EQ':([52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,213,216,217,218,219,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[137,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'GE':([52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,213,216,217,218,219,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[138,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'LE':([52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,213,216,217,218,219,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[139,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'GTLT':([52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,213,216,217,218,219,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[140,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'NE':([52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,213,216,217,218,219,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[141,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'IS':([52,53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,213,216,217,218,219,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[142,-99,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,-100,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'^':([53,54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,213,216,217,218,219,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[144,-97,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,144,-98,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'&':([54,55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,216,217,218,219,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[145,-95,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,145,-96,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'LSHIFT':([55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,217,218,219,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[146,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,146,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'RSHIFT':([55,56,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,217,218,219,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[147,-92,-89,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,147,-93,-94,-90,-91,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'*':([57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[150,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,150,150,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'FLOOR_DIVIDE':([57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[151,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,151,151,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'/':([57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[152,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,152,152,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'%':([57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,154,155,156,161,165,168,220,221,222,223,224,225,226,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[153,-84,-80,-78,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-82,-81,-83,-14,-12,-37,153,153,-85,-86,-87,-88,-79,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'POW':([63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,161,165,168,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[157,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-14,-12,-37,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'.':([63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,110,111,112,113,114,161,165,168,227,235,241,242,243,246,249,251,252,253,256,283,284,289,294,],[158,-47,-48,-49,-50,-51,-1,-2,-3,-4,-5,-136,-6,-7,-8,-9,-10,-11,-1,-48,-49,-50,158,-14,-12,-37,-52,-65,-1,-15,-16,-13,-38,-39,-44,-45,-46,-53,-54,-66,-36,]),'IN':([74,108,109,110,111,112,113,143,194,227,270,283,284,293,295,],[-136,193,-133,-137,-138,-139,-140,215,-135,-52,-134,-53,-54,324,325,]),'=':([74,109,110,111,112,113,116,128,129,194,227,241,270,281,283,284,322,],[-136,-133,-137,-138,-139,-140,196,208,-146,-135,-52,292,-134,-147,-53,-54,292,]),'INDENT':([92,184,186,197,264,266,267,271,274,275,276,331,334,360,377,402,409,410,],[178,262,263,273,302,304,305,308,311,312,313,352,355,382,391,408,412,413,]),'MULTILINE_END':([97,259,260,],[180,-215,-214,]),'ELIF':([357,379,380,394,418,],[381,381,-176,-177,-178,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'root':([0,],[1,]),'document_root':([2,],[4,]),'stanzas':([2,178,262,263,273,304,305,308,312,313,352,355,382,391,408,412,413,],[5,257,300,301,310,332,333,336,341,342,375,376,396,401,411,415,416,]),'empty':([2,],[6,]),'stanza':([2,5,7,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[7,85,86,7,85,7,7,7,85,85,7,7,7,85,7,7,85,85,85,85,85,7,7,85,85,7,7,85,85,7,85,7,7,85,85,]),'yaydict':([2,5,7,8,87,178,257,262,263,273,300,301,302,304,305,308,310,312,313,330,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[8,8,8,87,87,8,8,8,8,8,8,8,330,8,8,8,8,8,8,87,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'yaylist':([2,5,7,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'extend':([2,5,7,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'directives':([2,5,7,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'directive':([2,5,7,11,12,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[12,12,12,89,90,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'key':([2,5,7,8,15,28,87,178,257,262,263,273,300,301,302,304,305,308,310,311,312,313,330,332,333,336,338,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[13,13,13,13,99,102,13,13,13,13,13,13,13,13,13,13,13,13,13,340,13,13,13,13,13,13,340,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'listitem':([2,5,7,9,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[14,14,14,88,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'include_directive':([2,5,7,11,12,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'search_directive':([2,5,7,11,12,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'new_directive':([2,5,7,11,12,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'prototype_directive':([2,5,7,11,12,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'for_directive':([2,5,7,11,12,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'set_directive':([2,5,7,11,12,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'if_directive':([2,5,7,11,12,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'select_directive':([2,5,7,11,12,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'macro_directive':([2,5,7,11,12,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'call_directive':([2,5,7,11,12,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'err_else':([2,5,7,11,12,178,257,262,263,273,300,301,304,305,308,310,312,313,332,333,336,341,342,352,355,375,376,382,391,396,401,408,411,412,413,415,416,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'expression_root':([3,],[40,]),'expression_list':([3,29,30,31,32,34,37,75,76,83,84,96,159,193,196,381,],[41,104,105,106,107,115,118,162,166,171,175,179,228,268,272,395,]),'expression':([3,29,30,31,32,34,37,75,76,83,84,96,121,123,125,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,326,369,374,381,399,],[42,42,42,42,42,42,42,164,167,174,42,42,201,203,205,230,239,42,42,278,280,288,297,298,314,317,288,320,323,335,350,386,388,42,388,]),'conditional_expression':([3,29,30,31,32,34,37,75,76,83,84,96,121,123,125,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,326,369,374,381,399,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'else_test':([3,29,30,31,32,34,37,75,76,83,84,96,121,123,125,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,326,369,374,381,399,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'lambda_form':([3,29,30,31,32,34,37,75,76,83,84,96,121,123,125,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,326,369,374,381,399,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'or_test':([3,29,30,31,32,34,37,75,76,83,84,96,121,122,123,125,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[46,46,46,46,46,46,46,46,46,46,46,46,46,202,46,46,46,46,269,46,46,46,46,46,46,46,46,46,46,46,46,346,349,46,346,346,46,46,46,346,406,]),'and_test':([3,29,30,31,32,34,37,75,76,83,84,96,121,122,123,124,125,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,204,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'not_test':([3,29,30,31,32,34,37,51,75,76,83,84,96,121,122,123,124,125,131,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[49,49,49,49,49,49,49,132,49,49,49,49,49,49,49,49,49,49,211,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'comparison':([3,29,30,31,32,34,37,51,75,76,83,84,96,121,122,123,124,125,131,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'or_expr':([3,29,30,31,32,34,37,51,75,76,83,84,96,121,122,123,124,125,131,133,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,212,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'xor_expr':([3,29,30,31,32,34,37,51,75,76,83,84,96,121,122,123,124,125,131,133,134,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,213,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'and_expr':([3,29,30,31,32,34,37,51,75,76,83,84,96,121,122,123,124,125,131,133,134,144,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,216,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'shift_expr':([3,29,30,31,32,34,37,51,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,217,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'a_expr':([3,29,30,31,32,34,37,51,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,218,219,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'m_expr':([3,29,30,31,32,34,37,51,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,220,221,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'u_expr':([3,29,30,31,32,34,37,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[60,60,60,60,60,60,60,60,154,155,156,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,222,223,224,225,226,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'power':([3,29,30,31,32,34,37,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,193,196,206,208,234,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'primary':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[63,63,63,63,63,114,63,114,63,114,114,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,114,63,63,63,63,114,114,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'atom':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'attributeref':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[65,65,65,65,65,111,65,111,65,111,111,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,111,65,65,65,65,111,111,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'subscription':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[66,66,66,66,66,112,66,112,66,112,112,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,112,66,66,66,66,112,112,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'slice':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[67,67,67,67,67,113,67,113,67,113,113,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,113,67,67,67,67,113,113,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'call':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'identifier':([3,29,30,31,32,33,34,35,37,38,39,47,51,58,59,62,75,76,83,84,96,121,122,123,124,125,130,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,190,193,194,196,206,207,208,234,245,248,250,254,277,282,285,286,290,291,292,307,324,325,326,343,348,365,368,369,374,381,387,399,],[69,69,69,69,69,110,69,110,69,110,110,129,69,69,69,69,69,69,69,69,69,69,69,69,69,69,129,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,241,265,69,110,69,69,129,69,69,110,110,69,69,69,129,69,69,241,322,69,69,69,69,69,322,129,69,69,69,69,69,69,69,]),'enclosure':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'parenth_form':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'list_display':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'generator_expression':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'dict_display':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'set_display':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'string_conversion':([3,29,30,31,32,33,34,35,37,38,39,51,58,59,62,75,76,83,84,96,121,122,123,124,125,131,133,134,144,145,146,147,148,149,150,151,152,153,157,159,160,193,194,196,206,208,234,245,248,250,254,277,285,286,290,292,307,324,325,326,365,368,369,374,381,387,399,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'scalar':([13,28,91,97,98,99,101,102,176,181,182,183,187,340,361,],[91,101,176,181,182,183,176,187,176,176,176,176,176,361,176,]),'multiline':([13,28,91,97,98,99,101,102,176,181,182,183,187,340,361,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'target_list':([33,35,38,39,245,248,],[108,116,119,120,293,295,]),'target':([33,35,38,39,194,245,248,],[109,109,109,109,270,109,109,]),'parameter_list':([47,348,],[126,370,]),'defparameter':([47,207,348,],[127,279,127,]),'parameter':([47,130,207,282,348,],[128,210,128,315,128,]),'comp_operator':([52,],[133,]),'list_comprehension':([75,],[163,]),'key_datum_list':([83,],[169,]),'dict_comprehension':([83,],[170,]),'comprehension':([83,],[172,]),'key_datum':([83,250,],[173,296,]),'sublist':([130,],[209,]),'proper_slice':([159,],[229,]),'short_slice':([159,],[231,]),'long_slice':([159,],[232,]),'lower_bound':([159,],[233,]),'argument_list':([160,],[236,]),'positional_arguments':([160,],[237,]),'keyword_arguments':([160,290,],[238,319,]),'kwarg':([160,290,291,343,],[240,240,321,321,]),'list_for':([164,344,385,],[244,366,366,]),'comp_for':([167,174,298,349,388,],[247,255,327,372,372,]),'upper_bound':([234,286,],[287,318,]),'stride':([285,],[316,]),'case_list':([311,],[338,]),'case_block':([311,338,],[339,359,]),'old_expression_list':([324,],[344,]),'old_expression':([324,365,368,387,],[345,384,385,398,]),'old_lambda_form':([324,365,368,387,],[347,347,347,347,]),'list_iter':([344,385,],[364,397,]),'list_if':([344,385,],[367,367,]),'comp_iter':([349,388,],[371,400,]),'comp_if':([349,388,],[373,373,]),'elif_list':([357,],[379,]),'elif':([357,379,],[380,394,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> root","S'",1,None,None,None),
  ('atom -> identifier','atom',1,'p_atom_identifier','parser.py',118),
  ('atom -> STRING','atom',1,'p_atom_literal','parser.py',125),
  ('atom -> INTEGER','atom',1,'p_atom_literal','parser.py',126),
  ('atom -> FLOAT','atom',1,'p_atom_literal','parser.py',127),
  ('atom -> enclosure','atom',1,'p_atom_enclosure','parser.py',134),
  ('enclosure -> parenth_form','enclosure',1,'p_enclosure','parser.py',140),
  ('enclosure -> list_display','enclosure',1,'p_enclosure','parser.py',141),
  ('enclosure -> generator_expression','enclosure',1,'p_enclosure','parser.py',142),
  ('enclosure -> dict_display','enclosure',1,'p_enclosure','parser.py',143),
  ('enclosure -> set_display','enclosure',1,'p_enclosure','parser.py',144),
  ('enclosure -> string_conversion','enclosure',1,'p_enclosure','parser.py',145),
  ('parenth_form -> ( )','parenth_form',2,'p_parent_form','parser.py',151),
  ('parenth_form -> ( expression_list )','parenth_form',3,'p_parent_form','parser.py',152),
  ('list_display -> [ ]','list_display',2,'p_list_display','parser.py',180),
  ('list_display -> [ expression_list ]','list_display',3,'p_list_display','parser.py',181),
  ('list_display -> [ list_comprehension ]','list_display',3,'p_list_display','parser.py',182),
  ('list_comprehension -> expression list_for','list_comprehension',2,'p_list_comprehension','parser.py',205),
  ('list_for -> FOR target_list IN old_expression_list','list_for',4,'p_list_for','parser.py',212),
  ('list_for -> FOR target_list IN old_expression_list list_iter','list_for',5,'p_list_for','parser.py',213),
  ('old_expression_list -> old_expression','old_expression_list',1,'p_old_expression_list','parser.py',223),
  ('old_expression_list -> old_expression_list , old_expression','old_expression_list',3,'p_old_expression_list','parser.py',224),
  ('old_expression_list -> old_expression_list ,','old_expression_list',2,'p_old_expression_list','parser.py',225),
  ('old_expression -> or_test','old_expression',1,'p_old_expression','parser.py',232),
  ('old_expression -> old_lambda_form','old_expression',1,'p_old_expression','parser.py',233),
  ('list_iter -> list_for','list_iter',1,'p_list_iter','parser.py',239),
  ('list_iter -> list_if','list_iter',1,'p_list_iter','parser.py',240),
  ('list_if -> IF old_expression','list_if',2,'p_list_if','parser.py',246),
  ('list_if -> IF old_expression list_iter','list_if',3,'p_list_if','parser.py',247),
  ('comprehension -> expression comp_for','comprehension',2,'p_comprehension','parser.py',256),
  ('comp_for -> FOR target_list IN or_test','comp_for',4,'p_comp_for','parser.py',262),
  ('comp_for -> FOR target_list IN or_test comp_iter','comp_for',5,'p_comp_for','parser.py',263),
  ('comp_iter -> comp_for','comp_iter',1,'p_comp_iter','parser.py',272),
  ('comp_iter -> comp_if','comp_iter',1,'p_comp_iter','parser.py',273),
  ('comp_if -> IF expression','comp_if',2,'p_comp_if','parser.py',279),
  ('comp_if -> IF expression comp_iter','comp_if',3,'p_comp_if','parser.py',280),
  ('generator_expression -> ( expression comp_for )','generator_expression',4,'p_generator_expression','parser.py',294),
  ('dict_display -> { }','dict_display',2,'p_dict_display','parser.py',301),
  ('dict_display -> { key_datum_list }','dict_display',3,'p_dict_display','parser.py',302),
  ('dict_display -> { dict_comprehension }','dict_display',3,'p_dict_display','parser.py',303),
  ('key_datum_list -> key_datum','key_datum_list',1,'p_key_datum_list','parser.py',313),
  ('key_datum_list -> key_datum_list , key_datum','key_datum_list',3,'p_key_datum_list','parser.py',314),
  ('key_datum -> expression : expression','key_datum',3,'p_key_datum','parser.py',324),
  ('dict_comprehension -> expression : expression comp_for','dict_comprehension',4,'p_dict_comprehension','parser.py',331),
  ('set_display -> { expression_list }','set_display',3,'p_set_display','parser.py',338),
  ('set_display -> { comprehension }','set_display',3,'p_set_display','parser.py',339),
  ('string_conversion -> ` expression_list `','string_conversion',3,'p_string_conversion','parser.py',346),
  ('primary -> atom','primary',1,'p_primary','parser.py',353),
  ('primary -> attributeref','primary',1,'p_primary','parser.py',354),
  ('primary -> subscription','primary',1,'p_primary','parser.py',355),
  ('primary -> slice','primary',1,'p_primary','parser.py',356),
  ('primary -> call','primary',1,'p_primary','parser.py',357),
  ('attributeref -> primary . IDENTIFIER','attributeref',3,'p_attributeref','parser.py',363),
  ('subscription -> primary [ expression_list ]','subscription',4,'p_subscription','parser.py',370),
  ('slice -> primary [ proper_slice ]','slice',4,'p_slice','parser.py',377),
  ('proper_slice -> short_slice','proper_slice',1,'p_proper_slice','parser.py',384),
  ('proper_slice -> long_slice','proper_slice',1,'p_proper_slice','parser.py',385),
  ('short_slice -> lower_bound :','short_slice',2,'p_short_slice_lower_only','parser.py',391),
  ('short_slice -> : upper_bound','short_slice',2,'p_short_slice_upper_only','parser.py',398),
  ('short_slice -> lower_bound : upper_bound','short_slice',3,'p_short_slice_both','parser.py',405),
  ('long_slice -> short_slice :','long_slice',2,'p_long_slice','parser.py',412),
  ('long_slice -> short_slice : stride','long_slice',3,'p_long_slice','parser.py',413),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',421),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',427),
  ('stride -> expression','stride',1,'p_stride','parser.py',433),
  ('call -> primary ( )','call',3,'p_call','parser.py',439),
  ('call -> primary ( argument_list )','call',4,'p_call','parser.py',440),
  ('argument_list -> positional_arguments','argument_list',1,'p_argument_list_with_positional','parser.py',451),
  ('argument_list -> positional_arguments ,','argument_list',2,'p_argument_list_with_positional','parser.py',452),
  ('argument_list -> positional_arguments , keyword_arguments','argument_list',3,'p_argument_list_with_positional','parser.py',453),
  ('argument_list -> positional_arguments , keyword_arguments ,','argument_list',4,'p_argument_list_with_positional','parser.py',454),
  ('argument_list -> keyword_arguments','argument_list',1,'p_argument_list_no_positional','parser.py',464),
  ('argument_list -> keyword_arguments ,','argument_list',2,'p_argument_list_no_positional','parser.py',465),
  ('positional_arguments -> expression','positional_arguments',1,'p_positional_arguments','parser.py',472),
  ('positional_arguments -> positional_arguments , expression','positional_arguments',3,'p_positional_arguments','parser.py',473),
  ('keyword_arguments -> kwarg','keyword_arguments',1,'p_keyword_arguments','parser.py',484),
  ('keyword_arguments -> keyword_arguments , kwarg','keyword_arguments',3,'p_keyword_arguments','parser.py',485),
  ('kwarg -> identifier = expression','kwarg',3,'p_kwarg','parser.py',496),
  ('power -> primary','power',1,'p_power','parser.py',503),
  ('power -> primary POW u_expr','power',3,'p_power','parser.py',504),
  ('u_expr -> power','u_expr',1,'p_u_expr','parser.py',514),
  ('u_expr -> - u_expr','u_expr',2,'p_u_expr','parser.py',515),
  ('u_expr -> + u_expr','u_expr',2,'p_u_expr','parser.py',516),
  ('u_expr -> ~ u_expr','u_expr',2,'p_u_expr','parser.py',517),
  ('m_expr -> u_expr','m_expr',1,'p_m_expr','parser.py',544),
  ('m_expr -> m_expr * u_expr','m_expr',3,'p_m_expr','parser.py',545),
  ('m_expr -> m_expr FLOOR_DIVIDE u_expr','m_expr',3,'p_m_expr','parser.py',546),
  ('m_expr -> m_expr / u_expr','m_expr',3,'p_m_expr','parser.py',547),
  ('m_expr -> m_expr % u_expr','m_expr',3,'p_m_expr','parser.py',548),
  ('a_expr -> m_expr','a_expr',1,'p_a_expr','parser.py',558),
  ('a_expr -> a_expr + m_expr','a_expr',3,'p_a_expr','parser.py',559),
  ('a_expr -> a_expr - m_expr','a_expr',3,'p_a_expr','parser.py',560),
  ('shift_expr -> a_expr','shift_expr',1,'p_shift_expr','parser.py',570),
  ('shift_expr -> shift_expr LSHIFT a_expr','shift_expr',3,'p_shift_expr','parser.py',571),
  ('shift_expr -> shift_expr RSHIFT a_expr','shift_expr',3,'p_shift_expr','parser.py',572),
  ('and_expr -> shift_expr','and_expr',1,'p_and_expr','parser.py',582),
  ('and_expr -> and_expr & shift_expr','and_expr',3,'p_and_expr','parser.py',583),
  ('xor_expr -> and_expr','xor_expr',1,'p_xor_expr','parser.py',593),
  ('xor_expr -> xor_expr ^ and_expr','xor_expr',3,'p_xor_expr','parser.py',594),
  ('or_expr -> xor_expr','or_expr',1,'p_or_expr','parser.py',604),
  ('or_expr -> or_expr | xor_expr','or_expr',3,'p_or_expr','parser.py',605),
  ('comparison -> or_expr','comparison',1,'p_comparison','parser.py',615),
  ('comparison -> or_expr comp_operator or_expr','comparison',3,'p_comparison','parser.py',616),
  ('comp_operator -> <','comp_operator',1,'p_comp_operator','parser.py',626),
  ('comp_operator -> >','comp_operator',1,'p_comp_operator','parser.py',627),
  ('comp_operator -> EQ','comp_operator',1,'p_comp_operator','parser.py',628),
  ('comp_operator -> GE','comp_operator',1,'p_comp_operator','parser.py',629),
  ('comp_operator -> LE','comp_operator',1,'p_comp_operator','parser.py',630),
  ('comp_operator -> GTLT','comp_operator',1,'p_comp_operator','parser.py',631),
  ('comp_operator -> NE','comp_operator',1,'p_comp_operator','parser.py',632),
  ('comp_operator -> IS','comp_operator',1,'p_comp_operator','parser.py',633),
  ('comp_operator -> IS NOT','comp_operator',2,'p_comp_operator','parser.py',634),
  ('comp_operator -> NOT','comp_operator',1,'p_comp_operator','parser.py',635),
  ('comp_operator -> NOT IN','comp_operator',2,'p_comp_operator','parser.py',636),
  ('or_test -> and_test','or_test',1,'p_or_test','parser.py',642),
  ('or_test -> or_test OR and_test','or_test',3,'p_or_test','parser.py',643),
  ('and_test -> not_test','and_test',1,'p_and_test','parser.py',653),
  ('and_test -> and_test AND not_test','and_test',3,'p_and_test','parser.py',654),
  ('not_test -> comparison','not_test',1,'p_not_test','parser.py',664),
  ('not_test -> NOT not_test','not_test',2,'p_not_test','parser.py',665),
  ('conditional_expression -> or_test','conditional_expression',1,'p_conditional_expression','parser.py',676),
  ('conditional_expression -> expression IF or_test ELSE expression','conditional_expression',5,'p_conditional_expression','parser.py',677),
  ('else_test -> expression ELSE expression','else_test',3,'p_else','parser.py',687),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',694),
  ('expression -> else_test','expression',1,'p_expression','parser.py',695),
  ('expression -> lambda_form','expression',1,'p_expression','parser.py',696),
  ('lambda_form -> LAMBDA : expression','lambda_form',3,'p_lambda_form','parser.py',702),
  ('lambda_form -> LAMBDA parameter_list : expression','lambda_form',4,'p_lambda_form','parser.py',703),
  ('old_lambda_form -> LAMBDA : expression','old_lambda_form',3,'p_old_lambda_form','parser.py',712),
  ('old_lambda_form -> LAMBDA parameter_list : old_expression','old_lambda_form',4,'p_old_lambda_form','parser.py',713),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',719),
  ('expression_list -> expression_list , expression','expression_list',3,'p_expression_list','parser.py',720),
  ('expression_list -> expression_list ,','expression_list',2,'p_expression_list','parser.py',721),
  ('target_list -> target','target_list',1,'p_target_list','parser.py',741),
  ('target_list -> target_list , target','target_list',3,'p_target_list','parser.py',742),
  ('target_list -> target_list ,','target_list',2,'p_target_list','parser.py',743),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','parser.py',759),
  ('target -> identifier','target',1,'p_target','parser.py',766),
  ('target -> attributeref','target',1,'p_target','parser.py',767),
  ('target -> subscription','target',1,'p_target','parser.py',768),
  ('target -> slice','target',1,'p_target','parser.py',769),
  ('parameter_list -> defparameter','parameter_list',1,'p_parameter_list','parser.py',778),
  ('parameter_list -> parameter_list , defparameter','parameter_list',3,'p_parameter_list','parser.py',779),
  ('parameter_list -> parameter_list ,','parameter_list',2,'p_parameter_list','parser.py',780),
  ('defparameter -> parameter','defparameter',1,'p_defparameter','parser.py',793),
  ('defparameter -> parameter = expression','defparameter',3,'p_defparameter','parser.py',794),
  ('parameter -> identifier','parameter',1,'p_parameter','parser.py',805),
  ('parameter -> ( sublist )','parameter',3,'p_parameter','parser.py',806),
  ('sublist -> parameter','sublist',1,'p_sublist','parser.py',815),
  ('sublist -> sublist , parameter','sublist',3,'p_sublist','parser.py',816),
  ('sublist -> sublist ,','sublist',2,'p_sublist','parser.py',817),
  ('directive -> include_directive','directive',1,'p_directive','parser.py',832),
  ('directive -> search_directive','directive',1,'p_directive','parser.py',833),
  ('directive -> new_directive','directive',1,'p_directive','parser.py',834),
  ('directive -> prototype_directive','directive',1,'p_directive','parser.py',835),
  ('directive -> for_directive','directive',1,'p_directive','parser.py',836),
  ('directive -> set_directive','directive',1,'p_directive','parser.py',837),
  ('directive -> if_directive','directive',1,'p_directive','parser.py',838),
  ('directive -> select_directive','directive',1,'p_directive','parser.py',839),
  ('directive -> macro_directive','directive',1,'p_directive','parser.py',840),
  ('directive -> call_directive','directive',1,'p_directive','parser.py',841),
  ('directive -> err_else','directive',1,'p_directive','parser.py',842),
  ('err_else -> ELSE : NEWLINE INDENT stanzas DEDENT','err_else',6,'p_err_else','parser.py',848),
  ('directives -> directive directive','directives',2,'p_directives','parser.py',855),
  ('directives -> directives directive','directives',2,'p_directives_merge','parser.py',862),
  ('include_directive -> INCLUDE expression_list NEWLINE','include_directive',3,'p_include_directive','parser.py',869),
  ('search_directive -> SEARCH expression_list NEWLINE','search_directive',3,'p_search_directive','parser.py',876),
  ('macro_directive -> MACRO target_list : NEWLINE INDENT stanzas DEDENT','macro_directive',7,'p_macro_directive','parser.py',883),
  ('call_directive -> CALL target_list : NEWLINE INDENT stanzas DEDENT','call_directive',7,'p_call_directive','parser.py',891),
  ('for_directive -> FOR target_list IN expression_list : NEWLINE INDENT stanzas DEDENT','for_directive',9,'p_for_directive','parser.py',898),
  ('for_directive -> FOR target_list IN or_test IF expression : NEWLINE INDENT stanzas DEDENT','for_directive',11,'p_for_directive','parser.py',899),
  ('set_directive -> SET target_list = expression_list NEWLINE','set_directive',5,'p_set_directive','parser.py',909),
  ('if_directive -> IF expression_list : NEWLINE INDENT stanzas DEDENT','if_directive',7,'p_if_directive_plain','parser.py',916),
  ('if_directive -> IF expression_list : NEWLINE INDENT stanzas DEDENT ELSE : NEWLINE INDENT stanzas DEDENT','if_directive',13,'p_if_directive_else','parser.py',923),
  ('if_directive -> IF expression_list : NEWLINE INDENT stanzas DEDENT elif_list','if_directive',8,'p_if_directive_elif','parser.py',930),
  ('if_directive -> IF expression_list : NEWLINE INDENT stanzas DEDENT elif_list ELSE : NEWLINE INDENT stanzas DEDENT','if_directive',14,'p_if_directive_else_elif','parser.py',937),
  ('elif_list -> elif','elif_list',1,'p_elif_list','parser.py',945),
  ('elif_list -> elif_list elif','elif_list',2,'p_elif_list','parser.py',946),
  ('elif -> ELIF expression_list : NEWLINE INDENT stanzas DEDENT','elif',7,'p_elif','parser.py',954),
  ('new_directive -> NEW expression_list AS identifier : NEWLINE INDENT stanzas DEDENT','new_directive',9,'p_new_as_directive','parser.py',961),
  ('new_directive -> NEW expression_list : NEWLINE INDENT stanzas DEDENT','new_directive',7,'p_new_directive','parser.py',970),
  ('prototype_directive -> PROTOTYPE expression_list : NEWLINE INDENT stanzas DEDENT','prototype_directive',7,'p_prototype_directive','parser.py',977),
  ('select_directive -> SELECT expression_list : NEWLINE INDENT case_list DEDENT','select_directive',7,'p_select_directive','parser.py',984),
  ('case_list -> case_block','case_list',1,'p_case_list','parser.py',991),
  ('case_list -> case_list case_block','case_list',2,'p_case_list','parser.py',992),
  ('case_block -> key NEWLINE INDENT stanzas DEDENT','case_block',5,'p_case_block','parser.py',1003),
  ('case_block -> key scalar NEWLINE','case_block',3,'p_case_block','parser.py',1004),
  ('case_block -> key NEWLINE','case_block',2,'p_case_block','parser.py',1005),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',1017),
  ('root -> DOCUMENT_START document_root','root',2,'p_root','parser.py',1024),
  ('root -> EXPRESSION_START expression_root','root',2,'p_root','parser.py',1025),
  ('document_root -> stanzas','document_root',1,'p_document_root','parser.py',1031),
  ('document_root -> empty','document_root',1,'p_document_root','parser.py',1032),
  ('expression_root -> expression_list','expression_root',1,'p_expression_root','parser.py',1038),
  ('stanza -> yaydict','stanza',1,'p_stanza','parser.py',1044),
  ('stanza -> yaylist','stanza',1,'p_stanza','parser.py',1045),
  ('stanza -> extend','stanza',1,'p_stanza','parser.py',1046),
  ('stanza -> directives','stanza',1,'p_stanza','parser.py',1047),
  ('stanza -> directive','stanza',1,'p_stanza','parser.py',1048),
  ('stanzas -> stanza','stanzas',1,'p_stanzas','parser.py',1054),
  ('stanzas -> stanza stanza','stanzas',2,'p_stanzas','parser.py',1055),
  ('stanzas -> stanzas stanza','stanzas',2,'p_stanzas_merge','parser.py',1065),
  ('extend -> EXTEND key scalar NEWLINE','extend',4,'p_extend','parser.py',1072),
  ('extend -> EXTEND key NEWLINE INDENT stanzas DEDENT','extend',6,'p_extend','parser.py',1073),
  ('scalar -> EMPTYDICT','scalar',1,'p_scalar_emptydict','parser.py',1086),
  ('scalar -> EMPTYLIST','scalar',1,'p_scalar_emptylist','parser.py',1093),
  ('scalar -> VALUE','scalar',1,'p_scalar_value','parser.py',1100),
  ('key -> VALUE COLON','key',2,'p_key','parser.py',1107),
  ('scalar -> LDBRACE expression_list RDBRACE','scalar',3,'p_template','parser.py',1113),
  ('scalar -> multiline MULTILINE_END','scalar',2,'p_scalar_multiline','parser.py',1120),
  ('scalar -> scalar scalar','scalar',2,'p_scalar_merge','parser.py',1126),
  ('yaydict -> key scalar NEWLINE','yaydict',3,'p_yaydict_keyscalar','parser.py',1133),
  ('yaydict -> key NEWLINE INDENT stanzas DEDENT','yaydict',5,'p_yaydict_keystanza','parser.py',1140),
  ('yaydict -> key NEWLINE','yaydict',2,'p_yaydict_keyblank','parser.py',1147),
  ('multiline -> MULTILINE scalar NEWLINE','multiline',3,'p_multiline','parser.py',1156),
  ('multiline -> multiline scalar NEWLINE','multiline',3,'p_multiline_merge','parser.py',1164),
  ('yaydict -> yaydict yaydict','yaydict',2,'p_yaydict_merge','parser.py',1172),
  ('listitem -> HYPHEN scalar NEWLINE','listitem',3,'p_listitem_scalar','parser.py',1179),
  ('listitem -> HYPHEN key NEWLINE INDENT stanzas DEDENT','listitem',6,'p_listitem_key_newline','parser.py',1186),
  ('listitem -> HYPHEN key scalar NEWLINE','listitem',4,'p_listitem_key_scalar','parser.py',1193),
  ('listitem -> HYPHEN key scalar NEWLINE INDENT yaydict DEDENT','listitem',7,'p_listitem_dict','parser.py',1200),
  ('yaylist -> listitem','yaylist',1,'p_yaylist','parser.py',1208),
  ('yaylist -> yaylist listitem','yaylist',2,'p_yaylist','parser.py',1209),
]
